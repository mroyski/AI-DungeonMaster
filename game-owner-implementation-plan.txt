## GAME OWNER FEATURE IMPLEMENTATION PLAN

### Current State Analysis:
- Room model already has `owner` field referencing a Player
- No room creation endpoints exist yet
- Frontend only shows existing rooms for joining
- No ownership permissions implemented

### Phase 1: Basic Room Creation & Ownership
**Backend Changes:**
1. Add POST /rooms endpoint for creating rooms
   - Validate user has selected player
   - Set room owner to current player
   - Return created room with owner populated

2. Modify Room model if needed:
   - Current schema is good: owner references Player
   - Add isPrivate field for future private rooms
   - Consider adding maxPlayers field

**Frontend Changes:**
3. Add "Create Room" button/modal to Rooms component
   - Form with room name input
   - Submit creates room via API call
   - Redirect to newly created room

4. Update Room interface to include owner field
   - Add owner: Player to Room.interface.tsx
   - Update room display to show owner name

### Phase 2: Join Request System
**Backend Changes:**
5. Add JoinRequest model:
   - player: Player ref (who wants to join)
   - room: Room ref 
   - status: pending/approved/denied
   - message: optional message from player
   - timestamps

6. Add join request endpoints:
   - POST /rooms/:id/join-requests (create request)
   - GET /rooms/:id/join-requests (owner gets pending requests)
   - PUT /join-requests/:id/approve (owner approves)
   - PUT /join-requests/:id/deny (owner denies)

7. Update socket events:
   - Emit to room owner when new join request received
   - Emit to requester when request approved/denied

**Frontend Changes:**
8. Replace direct room joining with join request flow:
   - Show "Request to Join" button instead of "Join Room"
   - Modal to write optional message to owner
   - Show pending request status

9. Add Owner Dashboard for room owners:
   - List of pending join requests
   - Approve/deny buttons
   - Show requester's player info

### Phase 3: Owner Permissions & Controls
**Backend Changes:**
10. Add middleware to verify room ownership:
    - Helper function isRoomOwner(userId, roomId)
    - Protect owner-only endpoints

11. Add owner management features:
    - Remove players from room
    - Delete room (with confirmation)
    - Transfer ownership to another player

**Frontend Changes:**
12. Add room management UI for owners:
    - Player list with kick buttons
    - Room settings panel
    - Delete room button

13. Add ownership indicators:
    - Crown icon next to owner name
    - Different UI for owners vs players

### Phase 4: Enhanced Features
14. Multiple room ownership:
    - Allow users to own multiple rooms
    - Dashboard showing all owned rooms

15. Room privacy settings:
    - Public rooms (appear in room list)
    - Private rooms (invite-only)
    - Password-protected rooms

16. Player limits:
    - Max players per room setting
    - Auto-deny when room full

### Implementation Order:
1. Backend: Room creation endpoint
2. Frontend: Create room UI
3. Backend: Join request system
4. Frontend: Join request flow
5. Backend: Owner permissions
6. Frontend: Owner dashboard
7. Enhanced features

### Technical Considerations:
- Room owner should be stored at Player level (current approach is correct)
- Need to handle edge cases: owner leaves room, player deleted, etc.
- Consider room archival vs deletion
- Socket.io room management for real-time updates
- Authorization middleware for all owner-only operations